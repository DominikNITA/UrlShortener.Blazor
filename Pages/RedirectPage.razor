@page "/{ShortUrl}"
@using UrlShortener.Components
@inject RedirectService RedirectService
@inject NavigationManager NavigationManager
@inject AdService AdService

<div class="redirect-banner">
    <p class="redirect-banner__text">Redirection in <span class="timer">@_timerValue.Seconds</span> seconds</p>
</div>
<div class="ads">
    @if (_adData != null)
    {
        foreach (var adData in _adData)
        {
            <AdDisplay AdData="adData"></AdDisplay>
        }
    }
</div>
<FooterComponent></FooterComponent>


@code {
    [Parameter] public string ShortUrl { get; set; } = string.Empty;

    string _redirectUrl = "";
    TimeSpan _timerValue = new TimeSpan(0, 0, 5);
    bool _isStopWatchRunning = false;
    List<AdData> _adData;

    protected override void OnInitialized()
    {
        _adData = AdService.GetAds();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ShortUrl != "r")
        {
            await StartTimer();
        }
    }


    async Task StartTimer()
    {
        _isStopWatchRunning = true;
        while (_isStopWatchRunning)
        {
            await Task.Delay(1000);
            _timerValue = _timerValue.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
            if (_timerValue.Seconds <= 0)
            {
                _isStopWatchRunning = false;
                _redirectUrl = await RedirectService.GetRedirectUrl(ShortUrl);
                NavigationManager.NavigateTo(_redirectUrl);
            }
        }
    }
}