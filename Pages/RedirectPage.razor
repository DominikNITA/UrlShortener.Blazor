@page "/{ShortUrl}"
@layout RedirectLayout
@using UrlShortener.Components
@inject RedirectService RedirectService
@inject NavigationManager NavigationManager
@inject AdService AdService

<div class="redirect-banner">
    <a href="/"><span>URL .NET SHORTENER</span></a>
    <p class="redirect-banner__text">Redirection in <span class="timer">@_timerValue.Seconds</span> seconds</p>
</div>
@if(_errorMessage != ""){
    <div class="alert alert-danger">@_errorMessage</div>
}
<div class="ads">
    @if (_adData != null)
    {
        foreach (var adData in _adData)
        {
            <AdDisplay AdData="adData"></AdDisplay>
        }
    }
</div>

@code {
    [Parameter] public string ShortUrl { get; set; } = string.Empty;

    string _urlRedirect;
    TimeSpan _timerValue = new TimeSpan(0, 0, 5);
    bool _isStopWatchRunning = false;
    List<AdData> _adData;
    string _errorMessage = "";

    protected async override Task OnInitializedAsync()
    {
        var urlResponse = await RedirectService.GetRedirectUrl(ShortUrl);

        if (!urlResponse.IsSuccessful)
        {
            _errorMessage = urlResponse.ErrorMessage;
            StateHasChanged();
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/");
            return;
        }

        if (!urlResponse.Result.ShowAds)
        {
            NavigationManager.NavigateTo(urlResponse.Result.RedirectUrl);
            return;
        }

        _urlRedirect = urlResponse.Result.RedirectUrl;
        Console.WriteLine(_urlRedirect);
        _adData = AdService.GetAds();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StartTimer();
        }
    }


    async Task StartTimer()
    {
        _isStopWatchRunning = true;
        while (_isStopWatchRunning)
        {
            await Task.Delay(1000);
            _timerValue = _timerValue.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
            if (_timerValue.Seconds <= 0)
            {
                _isStopWatchRunning = false;
                NavigationManager.NavigateTo(_urlRedirect);
            }
        }
    }
}